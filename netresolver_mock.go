// Code generated by MockGen. DO NOT EDIT.
// Source: spf2ip.go
//
// Generated by this command:
//
//	mockgen -package spf2ip -source spf2ip.go -destination netresolver_mock.go
//
// Package spf2ip is a generated GoMock package.
package spf2ip

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNetResolver is a mock of NetResolver interface.
type MockNetResolver struct {
	ctrl     *gomock.Controller
	recorder *MockNetResolverMockRecorder
}

// MockNetResolverMockRecorder is the mock recorder for MockNetResolver.
type MockNetResolverMockRecorder struct {
	mock *MockNetResolver
}

// NewMockNetResolver creates a new mock instance.
func NewMockNetResolver(ctrl *gomock.Controller) *MockNetResolver {
	mock := &MockNetResolver{ctrl: ctrl}
	mock.recorder = &MockNetResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetResolver) EXPECT() *MockNetResolverMockRecorder {
	return m.recorder
}

// LookupIP mocks base method.
func (m *MockNetResolver) LookupIP(ctx context.Context, network, host string) ([]net.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIP", ctx, network, host)
	ret0, _ := ret[0].([]net.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupIP indicates an expected call of LookupIP.
func (mr *MockNetResolverMockRecorder) LookupIP(ctx, network, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIP", reflect.TypeOf((*MockNetResolver)(nil).LookupIP), ctx, network, host)
}

// LookupMX mocks base method.
func (m *MockNetResolver) LookupMX(ctx context.Context, domain string) ([]*net.MX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupMX", ctx, domain)
	ret0, _ := ret[0].([]*net.MX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupMX indicates an expected call of LookupMX.
func (mr *MockNetResolverMockRecorder) LookupMX(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMX", reflect.TypeOf((*MockNetResolver)(nil).LookupMX), ctx, domain)
}

// LookupTXT mocks base method.
func (m *MockNetResolver) LookupTXT(ctx context.Context, domain string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupTXT", ctx, domain)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupTXT indicates an expected call of LookupTXT.
func (mr *MockNetResolverMockRecorder) LookupTXT(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupTXT", reflect.TypeOf((*MockNetResolver)(nil).LookupTXT), ctx, domain)
}
